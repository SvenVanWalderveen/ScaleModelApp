// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScaleModelDomain.Database.Context;

namespace ScaleModelDomain.Migrations
{
    [DbContext(typeof(ScaleModelDatabaseContext))]
    [Migration("20201218204518_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Manuals.Manual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManualName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalSteps")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Manuals");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Manuals.ManualAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileLocation")
                        .HasColumnType("TEXT");

                    b.Property<int>("FileType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ManualStepId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ManualStepId");

                    b.ToTable("ManualAttachments");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Manuals.ManualStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ManualId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StepNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StepTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ManualId");

                    b.ToTable("ManualSteps");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.InputFieldConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ControlType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ToolTip")
                        .HasColumnType("TEXT");

                    b.Property<int>("ValidationRule")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("InputFieldConfigurations");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ScaleModelOrders");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<double>("PricePerUnit")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Productcode")
                        .HasColumnType("TEXT");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ScaleModelOrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ScaleModelProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScaleModelOrderId");

                    b.HasIndex("ScaleModelProjectId");

                    b.ToTable("ScaleModelOrderLines");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelPictures", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ScaleModelProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScaleModelProjectId");

                    b.ToTable("ScaleModelPictures");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScaleModelProjectTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScaleModelProjectTypeId");

                    b.ToTable("ScaleModelProjects");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelProjectType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ScaleModelProjectTypes");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelProjectTypeInputField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InputFieldConfigurationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScaleModelProjecTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ScaleModelProjectTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InputFieldConfigurationId");

                    b.HasIndex("ScaleModelProjectTypeId");

                    b.ToTable("ScaleModelProjectTypeInputFields");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<double?>("EstimatedTimeHours")
                        .HasColumnType("REAL");

                    b.Property<double?>("RemainingTimeHours")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ScaleModelProjectId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScaleModelProjectId");

                    b.ToTable("ScaleModelTasks");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Manuals.ManualAttachment", b =>
                {
                    b.HasOne("ScaleModelDomain.Database.Entities.Manuals.ManualStep", "ManualStep")
                        .WithMany("Attachments")
                        .HasForeignKey("ManualStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManualStep");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Manuals.ManualStep", b =>
                {
                    b.HasOne("ScaleModelDomain.Database.Entities.Manuals.Manual", "Manual")
                        .WithMany("ManualSteps")
                        .HasForeignKey("ManualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manual");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelOrderLine", b =>
                {
                    b.HasOne("ScaleModelDomain.Database.Entities.Projects.ScaleModelOrder", "ScaleModelOrder")
                        .WithMany("ScaleModelOrderLines")
                        .HasForeignKey("ScaleModelOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScaleModelDomain.Database.Entities.Projects.ScaleModelProject", "ScaleModelProject")
                        .WithMany()
                        .HasForeignKey("ScaleModelProjectId");

                    b.Navigation("ScaleModelOrder");

                    b.Navigation("ScaleModelProject");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelPictures", b =>
                {
                    b.HasOne("ScaleModelDomain.Database.Entities.Projects.ScaleModelProject", "ScaleModelProject")
                        .WithMany()
                        .HasForeignKey("ScaleModelProjectId");

                    b.Navigation("ScaleModelProject");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelProject", b =>
                {
                    b.HasOne("ScaleModelDomain.Database.Entities.Projects.ScaleModelProjectType", "ScaleModelProjectType")
                        .WithMany()
                        .HasForeignKey("ScaleModelProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScaleModelProjectType");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelProjectTypeInputField", b =>
                {
                    b.HasOne("ScaleModelDomain.Database.Entities.Projects.InputFieldConfiguration", "InputFieldConfiguration")
                        .WithMany("ScaleModelProjectTypeInputFields")
                        .HasForeignKey("InputFieldConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScaleModelDomain.Database.Entities.Projects.ScaleModelProjectType", "ScaleModelProjectType")
                        .WithMany("ScaleModelProjectTypeInputFields")
                        .HasForeignKey("ScaleModelProjectTypeId");

                    b.Navigation("InputFieldConfiguration");

                    b.Navigation("ScaleModelProjectType");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelTask", b =>
                {
                    b.HasOne("ScaleModelDomain.Database.Entities.Projects.ScaleModelProject", "ScaleModelProject")
                        .WithMany("Tasks")
                        .HasForeignKey("ScaleModelProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScaleModelProject");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Manuals.Manual", b =>
                {
                    b.Navigation("ManualSteps");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Manuals.ManualStep", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.InputFieldConfiguration", b =>
                {
                    b.Navigation("ScaleModelProjectTypeInputFields");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelOrder", b =>
                {
                    b.Navigation("ScaleModelOrderLines");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelProject", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ScaleModelDomain.Database.Entities.Projects.ScaleModelProjectType", b =>
                {
                    b.Navigation("ScaleModelProjectTypeInputFields");
                });
#pragma warning restore 612, 618
        }
    }
}
